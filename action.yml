name: 'GHA .NET Builder'
author: 'hoglandets-it/scheibling'
description: 'Build .NET packages and deploy to nuget feeds or create releases'
inputs:
  buildShell:
    description: 'The shell to use for the build commands (powershell/pwsh/bash)'
    required: true
    default: "powershell"
  buildProject:
    description: 'The path to the .csproj-file to be built'
    required: true
    default: "${{ github.event.repository.name }}/${{ github.event.repository.name }}.csproj"
  buildVersion:
    description: 'The path to the file containing the current version number (default uses the tag from your project file)'
    required: false
  incrementVersion:
    description: "Whether to automatically increment a version (empty or major/minor/patch)"
    required: false
    default: "patch"
  incrementVersionWriteback:
    description: "Whether to write back the incremented version to the project file"
    required: false
    default: "true"
  writebackName:
    description: "The name of the user writing back the property"
    required: false
    default: "AutoPush"
  writebackEmail:
    description: "The email of the user writing back the property"
    required: false
    default: "autopush@null"
  buildVersionSuffix:
    description: 'Suffix for the build version to use when packaging'
    required: false
  buildConfiguration:
    description: "The build configuration for dotnet pack"
    required: false
    default: "Release"
  includeSource:
    description: 'Whether to include the application source in the package'
    required: false
    default: "true"
  outputDirectory:
    description: 'Where to put the .nupkg-files from the build'
    required: false
    default: "."
  packageFeedUrl:
    description: 'If you want to publish the package, specify the target feed here'
    required: false
  packageFeedSecret:
    description: 'The API key for the target feed needed to upload the package'
    required: false
  packageReleaseToken:
    description: 'The token to use to create/manage the release'
    required: false
    default: ${{ github.token }}
  packageReleaseName:
    description: 'To create a release file, specify a name for the relese here'
    required: false
  packageReleaseBody:
    description: 'The body for the release, either string/multiline-string or the path to a file in the repo reltive to the root'
    required: false
    default: 'README.md'
  packageReleaseFiles:
    description: 'Files that are to be included in the release (one per line)'
    required: false
    default: '*.nupkg'
runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set Version
      shell: ${{ inputs.buildShell }}
      run: |
        echo newver=$(python ${{ github.action_path }}/helpers/set-version.py "${{ inputs.buildVersion }}" "${{ inputs.incrementVersion }}" "${{ inputs.incrementVersionWriteback }}") >> $GITHUB_OUTPUT
      id: new-version

    - name: Build
      shell: ${{ inputs.buildShell }}
      run: |
        echo "Building version ${{ steps.new-version.outputs.newver }}"
        dotnet pack \
          --configuration ${{ inputs.buildConfiguration }} \
          $(python ${{ github.action_path }}/helpers/isset.py "--include-source" "${{ inputs.includeSource }}") \
          --output ${{ inputs.outputDirectory }} \
          /p:Version=${{ steps.new-version.outputs.newver }} \
          ${{ inputs.buildProject }}

    - name: Publish the new package
      shell: ${{ inputs.buildShell }}
      if: inputs.packageFeedUrl != ''
      run: |
        dotnet nuget push \
          ${{ inputs.outputDirectory }}/*.nupkg \
          --source ${{ inputs.packageFeedUrl }} \
          --api-key ${{ inputs.packageFeedSecret }}
    
    - name: Ensure release file exists
      shell: ${{ inputs.buildShell }}
      if: inputs.packageReleaseName != ''
      id: check-release-file
      run: |
        echo release-body=$(python ${{ github.action_path }}/helpers/check-release-body.py "${{ inputs.packageReleaseBody }}") > $GITHUB_OUTPUT

    - name: Create Release for package
      if: inputs.packageReleaseName != 'main'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.packageReleaseToken }}
      with:
        name: ${{ inputs.packageReleaseName }}
        tag_name: ${{ inputs.packageReleaseName }}
        body_path: ${{ steps.check-release-file.outputs.release-body }}
        files: ${{ inputs.packageReleaseFiles }}
    
    - name: Version number writeback if enabled
      if: ${{ inputs.incrementVersionWriteback == 'true' || inputs.incrementVersionWriteback == 'True' }}
      shell: ${{ inputs.buildShell }}
      run: |
        echo "Writing back version ${{ steps.new-version.outputs.newver }}"
        echo ${{ steps.new-version.outputs.newver }} > ${{ inputs.buildVersion }}
        git config user.email ${{ inputs.writebackEmail }}
        git config user.name ${{ inputs.writebackName }}
        git add ${{ inputs.buildVersion }}
        git commit -m "Version number writeback to ${{ steps.new-version.outputs.newver }}"
        git push origin ${{ github.ref }}
